{{define "title"}}Cheer{{end}}
{{define "head"}}
	{{JS "/static/js/vue.min.js"}}
    {{JS "/static/js/vue-resource.min.js"}}
    {{JS "/static/js/jquery.typeahead.min.js"}}
    {{CSS "/static/css/jquery.typeahead.min.css" "all"}}
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.1.0/css/all.css" integrity="sha384-lKuwvrZot6UHsBSfcMvOkWwlCMgc0TaWr+30HWe3a4ltaBwTZhyTEggF5tJv8tbt" crossorigin="anonymous">
{{end}}
{{define "content"}}

<div class="page-header">Hello, {{.id}}!</div>

<div id="app">
    <form action="/up/submit" @submit.prevent="getFormValues" id="cheer">

        <div class="container-fluid mt-2">
            <my-item v-for="(row, index) in rows" :row="row" :key="row.row" v-on:remove="removeRow(index)"></my-item>
        </div>

        <div class="container-fluid mt-2">
            <div class="row justify-content-between">
                <div class="col-1">
                    <button @click="addRow" type="button" class="btn btn-primary">Add</button>
                </div>
                <div class="col-1">
                    <button type="submit" class="btn btn-success">Submit</button>
                </div>
            </div>
        </div>

        <input type="hidden" name="from" value="{{.uid}}">
        <input type="hidden" name="_token" value="{{$.token}}">
    </form>
</div>

<template id="item-template">
    <div class="row mt-2">
        <div class="col-2">
            <div class="typeahead__container">
                <div class="typeahead__field">
                    <span class="typeahead__query">
                        <input type="text" id="typeahead" autocomplete="off" placeholder="Loading..." disabled>
                        <input name="uid" id="uid" type="hidden">
                    </span>
                </div>
            </div>
        </div>
        <div class="col-3">
            <input type="text" class="form-control" onfocus="this.blur();" name="cn" id="cn" readonly>
        </div>
        <div class="col-2 text-center">
            <div class="btn-group btn-group-toggle" data-toggle="buttons">
                <label class="btn btn-secondary">
                    <input type="radio" id="plus1" value="1" autocomplete="off">+1
                </label>
                <label class="btn btn-secondary">
                    <input type="radio" id="plus2" value="2" autocomplete="off">+2
                </label>
                <label class="btn btn-secondary">
                    <input type="radio" id="plus3" value="3" autocomplete="off">+3
                </label>
            </div>
        </div> 
        <div class="col-4">
            <input type="text" name="praise" class="form-control">
        </div>
        <div class="col-1">
            <button type="button" v-on:click="remove" class="form-control btn"><i class="far fa-trash-alt"></i></button>
        </div>
    </div>
</template>

<script>
    Vue.component('my-item', {
        props: ['row'],
        template: '#item-template',
        mounted: function() {
            $.typeahead({
                input: "#typeahead",
                mustSelectItem: true,
                generateOnLoad: true,
                minLength: 1,
                backdrop: {
                    "background-color": "#3879d9",
                    "opacity": "0.1",
                    "filter": "alpha(opacity=10)"
                },
                display: ["uid", "cn", "rhatNickName"],
                emptyTemplate: function (query) {
                    if (query.length > 0) {
                        return 'No results found for "' + query + '"';
                    }
                },
                template: function (query, item) {
                    onIrc = '';
                    if (item.rhatNickName != null && item.rhatNickName[0] !== item.uid[0]) {
                        onIrc = '<span class="rhatNickName"> <small>also known as <strong>{{`{{rhatNickName}}`}}</strong> on irc</small></span>';
                    };
                    return  '<span>' +
                        '<span class="cn">{{`{{cn}}`}}</span>' +
                        '<span class="uid"> <small>({{`{{uid}}`}}@redhat.com)</small></span>' +
                        onIrc +
                        '</span>'
                },
                source: {
                    people: {
                        ajax: {
                                url: "/static/data/rhos-up.json",
                                path: "data"
                        }
                    }
                },
                callback: {
                    onPopulateSource: function (node, data, group, path) {
                        node[0].disabled = false
                        node[0].placeholder="John Doe"

                        return data;
                    },
                    onClick: function (node, a, item, event) {
                        $('#uid').val(item.uid);
                        $('#cn').val(item.cn);
                        $('#plus1').attr('name', 'plus['+item.uid+']');
                        $('#plus2').attr('name', 'plus['+item.uid+']');
                        $('#plus3').attr('name', 'plus['+item.uid+']');
                    }
                }
            })
        },
        methods: {
            remove() {
                this.$emit('remove');
            },
        }
    });

    new Vue({
        el: '#app',
        delimiters: ['${','}'],
        data: {
            rows: [],
            groups: '{{.group}}',
            dfgs: {},
            render: true,
            cnt: 0,
        },
        async mounted() {
            if (this.groups != '') {
                this.dfgs = await this.groups.split(",");
            }
        },
        methods: {
            async getFormValues (event) {
                let formData = new FormData(event.target);
                await this.$http.post('/up/submit', formData);
                window.location.href = "/up/submit";
            },
            addRow() {
                $('#typeahead').prop('disabled', true);
                $('#typeahead').removeAttr('id');
                $('#cn').removeAttr('id');
                $('#uid').removeAttr('id');
                $('#plus1').removeAttr('id');
                $('#plus2').removeAttr('id');
                $('#plus3').removeAttr('id');
                this.rows.push({row: (this.cnt++)});
            },
            removeRow(index) {
                this.rows.splice(index, 1);
            }
        }
    });

$('#cheer').on('keyup keypress', function(e) {
    var keyCode = e.keyCode || e.which;
    if (keyCode === 13) { 
        e.preventDefault();
        return false;
    };
});

</script>
{{template "footer" .}}
{{- end}}
{{define "foot"}}{{end}}
