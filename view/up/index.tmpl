{{define "title"}}Cheer{{end}}
{{define "head"}}
	{{JS "/static/js/vue.min.js"}}
    {{JS "/static/js/jquery.min.js"}}
    {{JS "/static/js/vue-resource.min.js"}}
    {{JS "/static/js/jquery.typeahead.min.js"}}
    {{CSS "/static/css/jquery.typeahead.min.css" "all"}}
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.1.0/css/all.css" integrity="sha384-lKuwvrZot6UHsBSfcMvOkWwlCMgc0TaWr+30HWe3a4ltaBwTZhyTEggF5tJv8tbt" crossorigin="anonymous">
{{end}}
{{define "content"}}

<div class="page-header">Hello, {{.identity}}!</div>

<div id="app">
    <form action="/up/submit" @submit.prevent="getFormValues" id="cheer">

        <div v-for="groupid in dfgs">
            <dfg :groupid="groupid"></dfg>
        </div>

        <div class="container-fluid mt-2">
            <button type="submit" class="btn btn-primary">Submit</button>
        </div>

        <input type="hidden" name="from" value="{{.uid}}">
        <input type="hidden" name="_token" value="{{$.token}}">
    </form>
</div>

<template id="dfg">
    <div class="container-fluid">
        <div class="row w-100">
            <div class="card w-100 mt-2">
                <div class="card-header">${group.description[0]}</div>
                <div class="card-body">
                    <div v-if="loading"><i class="fa fa-spinner fa-spin"></i> Loading...</div>
                    <div v-else v-for="(member, i) in members">
                        <div v-if="member.uid[0] != '{{.uid}}'" class="form-row mt-1">
                            <div class="col-2">
                                <input type="text" name="uid" class="form-control" :value="member.uid[0]" readonly>
                            </div>
                            <div class="col-3">
                                <input type="text" class="form-control" :value="member.cn[0]" readonly>
                            </div>
                            <div class="col-2">
                                <div class="btn-group btn-group-toggle" data-toggle="buttons">
                                    <label class="btn btn-success">
                                        <input type="radio" :name="'plus['+member.uid[0]+']'" value="1" autocomplete="off">+1
                                    </label>
                                    <label class="btn btn-success">
                                        <input type="radio" :name="'plus['+member.uid[0]+']'" value="2" autocomplete="off">+2
                                    </label>
                                    <label class="btn btn-success">
                                        <input type="radio" :name="'plus['+member.uid[0]+']'" value="3" autocomplete="off">+3
                                    </label>
                                </div>
                            </div> 
                            <div class="col">
                                <input type="text" name="praise" class="form-control" :placeholder="'Enter your praise to ' + member.cn[0] + '...'">
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</template>

<script>
    Vue.component('dfg', {
        template: "#dfg",
        delimiters: ['${','}'],
        props: ['groupid'],
        data() {
            return {
                group: {
                    description: [],
                },
                members: [{
                    uid: [],
                    cn: [],
                }],
                loading: true,
            }
        },
        async mounted() {
            this.group = (await this.$http.get('http://rhos-test.op.redhat.com/api/v1/query?objectClass=rhatRoverGroup&cn='+this.groupid)).body[0];
            this.members = (await this.$http.get('http://rhos-test.op.redhat.com/api/v1/query?objectClass=rhatPerson&memberOf=*'+this.groupid+'*')).body;
            this.loading = false;
        }
    });

    let app = new Vue({
        el: '#app',
        delimiters: ['${','}'],
        data: {
            groups: '{{.group}}',
            dfgs: {},
        },
        async mounted() {
            if (this.groups != '') {
                this.dfgs = await this.groups.split(",");
            }
        },
        methods: {
            async getFormValues (event) {
                let formData = new FormData(event.target);
                await this.$http.post('/up/submit', formData);
                window.location.href = "/up/submit";
            }
        }
    });

$('#cheer').on('keyup keypress', function(e) {
  var keyCode = e.keyCode || e.which;
  if (keyCode === 13) { 
    e.preventDefault();
    return false;
  }
});
</script>
{{template "footer" .}}
{{- end}}
{{define "foot"}}{{end}}